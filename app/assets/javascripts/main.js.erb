var game = new Phaser.Game(400, 490, Phaser.AUTO, 'gameDiv');

var score, lineGraphic, bmd, worldBoundsWidth, circleCollisionGroup, lineCollisionGroup, circleTop, circleBot, jump, line, circle, diamond;
var startButton;
var gravity;
var delay;
var velocityX, velocityY,lastObjectY,lastObjectX, temp = 0, count =10000;

var preState = {
    preload : function(){
        game.load.image("circle","<%= asset_path('circle.png') %>");
        game.load.spritesheet("highScoreButton","<%= asset_path('button.jpg') %>");
        game.load.spritesheet("startButton","<%= asset_path('start-button.jpg') %>");
        game.load.image("diamond","<%= asset_path('diamond.png') %>");
        // game.load.image("circle","assets/circle.png");
        // game.load.image("diamond","assets/diamond.png");
        // game.load.spritesheet("highScoreButton","assets/button.jpg");
        // game.load.spritesheet("startButton","assets/start-button.jpg");
        game.stage.backgroundColor ="0xFFE4C4";
    },
    create : function(){
        game.physics.startSystem(Phaser.Physics.P2JS);
        game.physics.p2.setImpactEvents(true);
        game.world.setBounds(0, 0, worldBoundsWidth, 490);
        var bmd = game.add.bitmapData(1,1);
        bmd.ctx.beginPath();
        bmd.ctx.rect(0, 0, 1, 1);
        bmd.ctx.fillStyle = "#FFFFFF";
        bmd.ctx.fill();
        circleTop = game.add.sprite(200, 180, bmd);
        game.physics.p2.enable(circleTop);

        circleBot = game.add.sprite(200, 310, bmd);
        game.physics.p2.enable(circleBot);

        circle = game.add.sprite(200,245, 'circle');
        game.physics.p2.enable(circle);
        circle.body.static = true;
        var mainLine = game.add.sprite(200,250,bmd);
        game.physics.p2.enable(mainLine);
        lastObjectX = mainLine.x*2;
        lastObjectY = mainLine.y;
        mainLine.body.setRectangle(400,5,0,0);
        mainLine.body.static = true;
        lineGraphic = game.add.graphics(0,0);
        lineGraphic.lineStyle(5, 0x000000, 1);
        lineGraphic.moveTo(0,250);
        lineGraphic.lineTo(lastObjectX, lastObjectY);

        this.labelName = game.add.text(130,90, "0", { font:"40px Arial Bold", fill:"black"});
        this.labelName.text = "CIRCLE";

        // button high Score
        var highScoreButton = game.add.button(50, 350, 'highScoreButton', this.highScore , this, 0, 0, 0);
        var startButton = game.add.button(250, 350, 'startButton', this.start , this, 0, 0, 0);

    },
    over : function(){
        console.log("button over");
    },
    out : function(){
        console.log("button out");
    },
    start: function(){
        game.state.start('main');
    },
    highScore : function(){
        alert('Đang cập nhật, Click nút bên phải kìa');
    }
};
var afterState = {
    preload : function(){
        // game.load.image('circle',"<%= asset_path('circle.png') %>";
        // game.load.spritesheet('share','assets/shareFB.jpg');

        game.stage.backgroundColor ="0xFFE4C4";
    },
    create : function(){

        this.labelName = game.add.text(120,90, "0", { font:"40px Arial Bold", fill:"black"});
        this.labelName.align = "center";
        this.labelName.text = "Your Score" + "\n"+ "\n" +score;

        this.labelName1 = game.add.text(80,360, "0", { font:"20px Arial Bold", fill:"black"});
        this.labelName1.text = "1 more time ->";

        startButton = game.add.button(210, 350,'startButton', this.restart , this, 0, 0, 0);
        this.timer = game.time.events.add(500, this.bigButton, this);
        this.timer1 = game.time.events.add(500, this.smallButton, this);
        this.timer.start;
        //share facebook
        // var shareButton = game.add.button(250, 350, 'share', this.share , this, 0, 0, 0);
        for (var i = 0; i < 10; i++) {
            if (i % 2) {
                this.bigButton;
            }else{
                this.smallButton;
            }
            if(i==8){
                i = 1;
            }
        };

    },
    bigButton : function(){
        startButton.width += 50;
        startButton.height += 20;
        this.timer1.start;
    },
    smallButton: function(){
        startButton.width -= 50;
        startButton.height -= 20;
        this.timer.start;
    },
    restart: function(){
        game.state.start('main');
    },

    share : function(){
        alert('Đang cập nhật, Click nút bên phải kìa');
    }
};
var mainState = {
    preload : function(){
        game.stage.backgroundColor ="0xFFE4C4";
    },
    create : function(){
        game.physics.startSystem(Phaser.Physics.P2JS);
        game.physics.p2.setImpactEvents(true);

        game.world.setBounds(0, 0, worldBoundsWidth, 490);
        var bmd = game.add.bitmapData(1,10);
        bmd.ctx.beginPath();
        bmd.ctx.rect(0, 0, 1, 1);
        bmd.ctx.fillStyle = "#FFFFFF";
        bmd.ctx.fill();
        circleTop = game.add.sprite(200, 180, bmd);
        game.physics.p2.enable(circleTop);

        circleBot = game.add.sprite(200, 300, bmd);
        game.physics.p2.enable(circleBot);

        circle = game.add.sprite(200,240, 'circle');
        game.physics.p2.enable(circle);
        circle.height = 120;

        var mainLine = game.add.sprite(300,250,bmd);
        game.physics.p2.enable(mainLine);

        mainLine.body.setRectangle(600,5,0,0);
        mainLine.body.static = true;

        lastObjectX = mainLine.x*2;
        lastObjectY = mainLine.y;
        circleCollisionGroup = game.physics.p2.createCollisionGroup();
        lineCollisionGroup = game.physics.p2.createCollisionGroup();
        circleTop.body.setCollisionGroup(circleCollisionGroup);
        circleBot.body.setCollisionGroup(circleCollisionGroup);
        mainLine.body.setCollisionGroup(lineCollisionGroup);
        mainLine.body.collides([lineCollisionGroup, circleCollisionGroup]);

        // set camera của game đi theo vòng
        game.camera.follow(circleTop);
        game.camera.follow(circleBot);
        game.camera.follow(circle);
        //graphic
        lineGraphic = game.add.graphics(0,0);
        lineGraphic.lineStyle(5, 0x000000, 1);
        lineGraphic.moveTo(0,250);
        lineGraphic.lineTo(lastObjectX, lastObjectY);

        this.timer = game.time.events.loop(500, this.drawLine, this);
        // delay sau khi va chạm
        delay = game.time.create();
        var spaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
        spaceKey.onDown.add(this.jump, this);
        // tốc độ của các sprite 
        velocityX = 100;
        velocityY = -250;
        gravity = 500;
        game.physics.p2.gravity.y = gravity;
        //score label
        this.label = game.add.text(190,30, "0", { font:"30px Arial", fill:"black"});
        score = 0;
        this.label.text = score;
        this.label.fixedToCamera = true;
        //xử lý khi va chạm --> gọi delay function khi va chạm
        circleTop.body.collides(lineCollisionGroup, this.delay, this);
        circleBot.body.collides(lineCollisionGroup, this.delay, this);
    },
    jump : function(){
        circleTop.body.velocity.y = velocityY;
        circleBot.body.velocity.y = velocityY;
        circle.body.velocity.y = velocityY;
        score += 1;
        this.label.text = score;
    },
    update : function(){
        circleTop.body.velocity.x = velocityX;
        circleBot.body.velocity.x = velocityX;
        circle.body.velocity.x = velocityX;
    
        if (circleTop.x > count) {
            diamond.destroy();
            score += 50;
        }
        console.log(count);
    },
    drawLine : function(){
        // dùng hàm random để tạo điểm ngẫu nhiên vẽ LINE đến
        var rangeX = Math.floor(Math.random() * 150 + 20);
        var rangeY = Math.floor(Math.random() * 160 + 160);
        var randomR = Math.random() * 50 - 20;
        
        // Nếu LINE xuống quá thấp hoặc quá cao sẽ giảm hoặc tăng góc tương ứng để LINE không vượt quá khỏi màn hình chơi
        if(lastObjectY < 180){
            randomR -= 20;
        }else if(lastObjectY > 340){
            randomR += 20;
        }
        //
        var bmd = game.add.bitmapData(rangeX,5);
        bmd.ctx.beginPath();
        bmd.ctx.rect(0, 0, rangeX, 5);
        bmd.ctx.fillStyle = "#000000";
        bmd.ctx.fill();
        var radian = randomR * (Math.PI) / 180;
        var x = Math.cos(radian) * rangeX/2 + lastObjectX;
        var y = lastObjectY - Math.sin(radian) * rangeX/2;
        var mainLine1 = game.add.sprite(x, y,bmd);
        game.physics.p2.enable(mainLine1);
        mainLine1.body.setRectangle(rangeX,5,0,0);
        mainLine1.body.rotation = -radian;
        mainLine1.body.setCollisionGroup(lineCollisionGroup);
        mainLine1.body.collides([lineCollisionGroup, circleCollisionGroup]);
        mainLine1.body.static = true;
        if (score > 7) {
            if (score % 7 == 0) {
                diamond = game.add.sprite(x, y - 40, 'diamond');
                diamond.width = 30;
                diamond.height = 30;
                count = diamond.x;
            }
        };
        // lưu lại vị trí của điểm mới để bắt đầu vẽ lượt sau
        lastObjectX += Math.cos(radian)* rangeX;
        lastObjectY -= Math.sin(radian)* rangeX;
        // xóa LINE đi khi đã chạy ra ngoài màn hình
        mainLine1.checkWorldBounds = true;
        mainLine1.outOfBoundsKill = true;
        temp += 1;
    },
    ready : function(){

    },
    highScore: function(){

    },
    delay : function(){
        game.physics.clear();
        this.lbReact = game.add.text(circle.x -50,90, "0", { font:"40px Arial Bold", fill:"black"});
        this.lbReact.text = "OUCH !";
        delay.add(2000, this.result, this);
        delay.start();
    },
    result : function(){
        delay.stop();
        game.state.start('after');

    }
};

game.state.add('main',mainState);
game.state.add('pre',preState);
game.state.add('after',afterState);
game.state.start('pre');